#!/bin/bash
#
# Copyright: (C) 2019-2020 Nestybox Inc.  All rights reserved.
#

set -e

# Dockerd default configuration dir/file.
dockerCfgDir="/etc/docker"
dockerCfgFile="${dockerCfgDir}/daemon.json"

# sysbox-fs' default mountpoint path.
sysboxfs_mountpoint="/var/lib/sysboxfs"

# Kernel's pool-size of inotify resources.
inotify_pool_size=1048576


# Creates sysbox-fs mountpoint.
create_sysboxfs_mountpoint() {

    if [[ -d ${sysboxfs_mountpoint} ]]; then
        return
    fi

    mkdir -p ${sysboxfs_mountpoint}
    if [[ ! -d ${sysboxfs_mountpoint} ]]; then
        exit 1
    fi
}

# Enables the utilization of unprivileged user-namespaces.
enable_unprivileged_userns() {

    val=$(sysctl kernel.unprivileged_userns_clone)
    if [[ "${val##* }" = 0 ]]; then
        sysctl -w kernel.unprivileged_userns_clone=1 >/dev/null 2>&1
    fi
}

# Ensure kernel's 'inotify' resources meet sysbox requirements -- default values
# in most distros are too low for decent-size scenarios.
define_inotify_resources() {

    val=$(sysctl fs.inotify.max_queued_events)
    if [[ "${val##* }" -lt ${inotify_pool_size} ]]; then
        sysctl -w fs.inotify.max_queued_events=${inotify_pool_size} >/dev/null 2>&1
    fi

    val=$(sysctl fs.inotify.max_user_watches)
    if [[ "${val##* }" -lt ${inotify_pool_size} ]]; then
        sysctl -w fs.inotify.max_user_watches=${inotify_pool_size} >/dev/null 2>&1
    fi

    val=$(sysctl fs.inotify.max_user_instances)
    if [[ "${val##* }" -lt ${inotify_pool_size} ]]; then
        sysctl -w fs.inotify.max_user_instances=${inotify_pool_size} >/dev/null 2>&1
    fi
}

# Adds user/group in charge of running all sysbox components.
add_sysbox_user() {

    if ! getent passwd | grep "^sysbox:" >/dev/null 2>&1; then
        useradd -r -s /bin/false sysbox
    fi
}

# Create/Modify dockerd configuration (i.e. /etc/docker/daemon.json) to add Sysbox
# runtime.
adjust_docker_config() {

    local docker_sighup_required=false

    # If no dockerd default config-file exist, or if there's no content on it,
    # create one with a bare json layout.
    if [[ ! -f ${dockerCfgFile} ]] || [[ ! -s ${dockerCfgFile} ]]; then
        mkdir -p ${dockerCfgDir}
        touch ${dockerCfgFile}
        echo -e "{\n}" > ${dockerCfgFile}
    fi

    # If no 'runtimes' key-entry is present, proceed to add one.
    if [[ $(jq 'has("runtimes")' ${dockerCfgFile}) = false ]]; then
        jq --indent 4 '. + {"runtimes": {"sysbox-runc": {"path": "/usr/local/sbin/sysbox-runc"}}}' \
            ${dockerCfgFile} > tmp.json && mv tmp.json ${dockerCfgFile}

        docker_sighup_required=true

    # If no 'sysbox-runc' runtime entry is present, proceed to add it.
    elif [[ $(jq '.runtimes | has("sysbox-runc")' ${dockerCfgFile}) = false ]]; then
        jq --indent 4 '.runtimes |= . + {"sysbox-runc": {"path": "/usr/local/sbin/sysbox-runc"}}' \
            ${dockerCfgFile} > tmp.json && mv tmp.json ${dockerCfgFile}

        docker_sighup_required=true
    fi

    # Skip docker restart/sighup related processing if this one is not installed.
    if ! dpkg -s docker-ce >/dev/null 2>&1; then
        return
    fi

    # If sysbox runtime was added above, send a sighup to dockerd to have its
    # config file getting re-parsed. Note that changes made by this function are
    # being processed on the fly -- no need for cold-restart.
    if [[ ${docker_sighup_required} = true ]]; then
	    kill -SIGHUP $(pidof dockerd)
    fi
}

config_sysbox() {

    # Ensure sysbox-fs' default mountpoint is created in the file-system.
    create_sysboxfs_mountpoint

    # Allows user-namespaces creation for unprivileged users. This change will
    # persist through system reboots by relying on a sysctl.d config-file to be
    # generated as part of this package's installation process.
    enable_unprivileged_userns

    # Ensure kernel's inotify resources can meet Sysbox's scaling requirements.
    define_inotify_resources

    # Add 'sysbox' user to host a large pool of subordinate UIDs/GIDs to be
    # shared across all system-containers. This user must match the one defined
    # in the docker configuration file.
    add_sysbox_user

    # Adjust dockerd configuration.
    adjust_docker_config
}


case "$1" in
    configure)
        # Adjust system's configuration to satisfy Sysbox requirements.
        config_sysbox

        # Avoid calling exit() here to allow debhelper tools to add their
        # auto-generated code further below.
        ;;

    abort-*)
        ;;

    *)
        ;;
esac

#DEBHELPER#
